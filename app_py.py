# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18P2NIc9mZ1LY-W4vXvW7j-9dvEWyeFAH
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import torch
import torch.nn.functional as F
import numpy as np
from PIL import Image

# Device
DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Conditional VAE (same architecture as in training)
class CVAE(torch.nn.Module):
    def __init__(self, latent_dim=20):
        super(CVAE, self).__init__()
        self.fc1 = torch.nn.Linear(784 + 10, 400)
        self.fc21 = torch.nn.Linear(400, latent_dim)
        self.fc22 = torch.nn.Linear(400, latent_dim)
        self.fc3 = torch.nn.Linear(latent_dim + 10, 400)
        self.fc4 = torch.nn.Linear(400, 784)

    def encode(self, x, y):
        x = torch.cat([x, y], dim=1)
        h1 = F.relu(self.fc1(x))
        return self.fc21(h1), self.fc22(h1)

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return mu + eps * std

    def decode(self, z, y):
        z = torch.cat([z, y], dim=1)
        h3 = F.relu(self.fc3(z))
        return torch.sigmoid(self.fc4(h3))

    def generate(self, digit, num_samples=5):
        self.eval()
        with torch.no_grad():
            y = torch.tensor([digit] * num_samples)
            y_onehot = F.one_hot(y, 10).float().to(DEVICE)
            z = torch.randn(num_samples, 20).to(DEVICE)
            generated = self.decode(z, y_onehot)
            return generated.view(-1, 28, 28).cpu().numpy()

# Load model
@st.cache_resource
def load_model():
    model = CVAE()
    model.load_state_dict(torch.load("cvae_mnist.pth", map_location=DEVICE))
    model.to(DEVICE)
    return model

# Streamlit UI
st.title("ðŸ§  MNIST Digit Generator")
st.write("Generate handwritten digit images using a trained Conditional VAE")

selected_digit = st.selectbox("Select a digit to generate (0â€“9):", list(range(10)))
model = load_model()

if st.button("Generate Images"):
    st.write(f"### Generated Images for Digit {selected_digit}")
    images = model.generate(selected_digit, num_samples=5)
    cols = st.columns(5)
    for i in range(5):
        img = (images[i] * 255).astype(np.uint8)
        img_pil = Image.fromarray(img)
        cols[i].image(img_pil, width=100, caption=f"Sample {i+1}")

